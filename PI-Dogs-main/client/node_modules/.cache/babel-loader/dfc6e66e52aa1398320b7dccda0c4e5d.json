{"ast":null,"code":"const initialState = {\n  dogs: [],\n  allDogs: [],\n  //hago una copia del estado que siempre tenga todos los dogs para que me haga los filtros sobre todo y no sobre el estado que ya filtré\n  orderDogs: [],\n  //de esta manera no tengo que volver a cargar a todos los perros\n  weightDogs: [],\n  temperaments: [],\n  //declaro un nuevo estado temperament donde guardo los temperamentos\n  detail: [] //creo un nuevo estado detail para guardar la info del detalle del perro\n\n};\n\nfunction rootReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"GET_DOGS\":\n      return { ...state,\n        dogs: action.payload,\n        //en mi estaod dogs que en un principio es un array vacio manda todo lo que te mande la accion getDogs\n        allDogs: action.payload //y poné todos lo personajes en allDogs también (esto me sirve para los filtros)\n\n      };\n\n    case \"DOG_DETAIL\":\n      //al hacer click sobre un perro accedo a sus detalles\n      return { ...state,\n        detail: action.payload // a detail que es el estado que está creado arriba, pasale action.payload\n\n      };\n\n    case \"GET_DOGS_BY_NAME\":\n      return { ...state,\n        dogs: action.payload //lo renderizo en el array dogs, este es el filtrado de buscar por nombre que hice en el back\n\n      };\n\n    case \"GET_TEMPERAMENTS\":\n      return { ...state,\n        temperaments: action.payload\n      };\n\n    case \"POST_DOG\":\n      //post dog tiene que estar en el reducer pero no hace nada, porque yo creo un dog en una ruta nueva\n      return { ...state\n      };\n\n    case \"FILTER_DOGS_CREATED\":\n      //si el valor de mi acción es created, traigo todos aquellos creados en la DB\n      const dogsFiltered = action.payload === \"Created\" ? state.allDogs.filter(dog => dog.createdInDb) //primero siempre filtro el arreglo que tiene todo\n      : state.allDogs.filter(dog => !dog.createdInDb);\n      return { //retorno el estado, y si mi acción vale All traigo los de la api y los filtrados\n        ...state,\n        dogs: action.payload === \"All\" ? state.allDogs : dogsFiltered //si tiene todo devolveme todo y si no devolvéme todos los dogs filtrados\n\n      };\n\n    case \"FILTER_BY_TEMP\":\n      const allDogs = state.allDogs;\n      const filteredDogs = allDogs.filter(el => {\n        var _el$temperament;\n\n        return (_el$temperament = el.temperament) === null || _el$temperament === void 0 ? void 0 : _el$temperament.includes(action.payload);\n      } // action.payload es el temperamento que seleccioné en el filtro de temperamentos que está en el state temperaments y lo que me devuelve es un array de strings con los temperamentos.\n      );\n      return { ...state,\n        dogs: filteredDogs\n      };\n\n    /*el valor del select es lo que va a ser el (e.target.value) y va a llegar a la acción por payload\r\n          includes xque cada perro puede tener varios temperamentos\r\n          y si no, devolveme todos los dogs filtrados\r\n          y en dogs le devuelvo la constante filteredDogs; cuando vuelvo a hacer otro filtro, agarra el que tiene todos (allDogs)\r\n          pero el que va a modificar va a hacer el estado de dogs*/\n\n    case \"ORDER_BY_NAME\":\n      const orderDogs = action.payload === \"Asc\" //Si el valor es \"Asc\"\n      ? state.dogs.sort(function (a, b) {\n        //sort compara dos valores, accedemos al name y los compara, y los coloca a\n        if (a.name > b.name) return 1; //la derecha o a la izquierda, antes o despu{es en el arreglo dependiendo si son mas grandes o mas chicos\n\n        if (b.name > a.name) return -1;\n        return 0; //si son iguales los deja como está\n      }) // y si no, (si es no es Asc es Des) ordeno de Z a A\n      : state.dogs.sort(function (a, b) {\n        if (a.name > b.name) return -1;\n        if (b.name > a.name) return 1;\n        return 0;\n      });\n      return { ...state,\n        dogs: orderDogs\n      };\n\n    case \"ORDER_BY_WEIGHT\":\n      const weightDogs = action.payload === \"Weight 1\" ? state.dogs.sort(function (a, b) {\n        if (typeof action.payload.weight === \"string\") {\n          //si recibo un string con el peso\n          if (a.weight > b.weight) return 1; //accedo al valor weight que quiero comparar\n\n          if (a.weight < b.weight) return -1;\n          return 0; //si son iguales no hace nada, los deja igual\n        } else {\n          // lo convierto en número\n          if (parseInt(a.weight) > parseInt(b.weight)) return 1;\n          if (parseInt(a.weight) < parseInt(b.weight)) return -1;\n          return 0;\n        }\n      }) //si el valor no es 'weight 1'\n      : state.dogs.sort(function (a, b) {\n        //ordeno de mayor a menor\n        if (typeof action.payload.weight === \"string\") {\n          if (a.weight > b.weight) return -1;\n          if (a.weight < b.weight) return 1;\n          return 0;\n        } else {\n          if (parseInt(a.weight) > parseInt(b.weight)) return -1;\n          if (parseInt(a.weight) > parseInt(b.weight)) return 1;\n          return 0;\n        }\n      });\n      return { ...state,\n        dogs: weightDogs\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default rootReducer;","map":{"version":3,"sources":["C:/Users/andre/Desktop/DOG-PI/PI-Dogs/PI-Dogs-main/client/src/reducer/index.js"],"names":["initialState","dogs","allDogs","orderDogs","weightDogs","temperaments","detail","rootReducer","state","action","type","payload","dogsFiltered","filter","dog","createdInDb","filteredDogs","el","temperament","includes","sort","a","b","name","weight","parseInt"],"mappings":"AAAA,MAAMA,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE,EADW;AAEjBC,EAAAA,OAAO,EAAE,EAFQ;AAEJ;AACbC,EAAAA,SAAS,EAAE,EAHM;AAGF;AACfC,EAAAA,UAAU,EAAE,EAJK;AAKjBC,EAAAA,YAAY,EAAE,EALG;AAKC;AAClBC,EAAAA,MAAM,EAAE,EANS,CAML;;AANK,CAArB;;AASE,SAASC,WAAT,GAAmD;AAAA,MAA9BC,KAA8B,uEAAtBR,YAAsB;AAAA,MAARS,MAAQ;;AACjD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,UAAL;AACE,aAAO,EACL,GAAGF,KADE;AAELP,QAAAA,IAAI,EAAEQ,MAAM,CAACE,OAFR;AAEiB;AACtBT,QAAAA,OAAO,EAAEO,MAAM,CAACE,OAHX,CAGoB;;AAHpB,OAAP;;AAKF,SAAK,YAAL;AAAmB;AACjB,aAAO,EACL,GAAGH,KADE;AAELF,QAAAA,MAAM,EAAEG,MAAM,CAACE,OAFV,CAEmB;;AAFnB,OAAP;;AAIF,SAAK,kBAAL;AACE,aAAO,EACL,GAAGH,KADE;AAELP,QAAAA,IAAI,EAAEQ,MAAM,CAACE,OAFR,CAEiB;;AAFjB,OAAP;;AAIF,SAAK,kBAAL;AACE,aAAO,EACL,GAAGH,KADE;AAELH,QAAAA,YAAY,EAAEI,MAAM,CAACE;AAFhB,OAAP;;AAIF,SAAK,UAAL;AAAiB;AACf,aAAO,EACL,GAAGH;AADE,OAAP;;AAGF,SAAK,qBAAL;AAA4B;AAC1B,YAAMI,YAAY,GAChBH,MAAM,CAACE,OAAP,KAAmB,SAAnB,GACIH,KAAK,CAACN,OAAN,CAAcW,MAAd,CAAsBC,GAAD,IAASA,GAAG,CAACC,WAAlC,CADJ,CACmD;AADnD,QAEIP,KAAK,CAACN,OAAN,CAAcW,MAAd,CAAsBC,GAAD,IAAS,CAACA,GAAG,CAACC,WAAnC,CAHN;AAIA,aAAO,EACL;AACA,WAAGP,KAFE;AAGLP,QAAAA,IAAI,EAAEQ,MAAM,CAACE,OAAP,KAAmB,KAAnB,GAA2BH,KAAK,CAACN,OAAjC,GAA2CU,YAH5C,CAG0D;;AAH1D,OAAP;;AAKF,SAAK,gBAAL;AACE,YAAMV,OAAO,GAAGM,KAAK,CAACN,OAAtB;AACA,YAAMc,YAAY,GAAGd,OAAO,CAACW,MAAR,CAClBI,EAAD;AAAA;;AAAA,kCAAQA,EAAE,CAACC,WAAX,oDAAQ,gBAAgBC,QAAhB,CAAyBV,MAAM,CAACE,OAAhC,CAAR;AAAA,OADmB,CAC8B;AAD9B,OAArB;AAGA,aAAO,EACL,GAAGH,KADE;AAELP,QAAAA,IAAI,EAAEe;AAFD,OAAP;;AAIF;AACN;AACA;AACA;AACA;;AACM,SAAK,eAAL;AACE,YAAMb,SAAS,GACbM,MAAM,CAACE,OAAP,KAAmB,KAAnB,CAAyB;AAAzB,QACIH,KAAK,CAACP,IAAN,CAAWmB,IAAX,CAAgB,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAC9B;AACA,YAAID,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAf,EAAqB,OAAO,CAAP,CAFS,CAEC;;AAC/B,YAAID,CAAC,CAACC,IAAF,GAASF,CAAC,CAACE,IAAf,EAAqB,OAAO,CAAC,CAAR;AACrB,eAAO,CAAP,CAJ8B,CAIpB;AACX,OALD,CADJ,CAMO;AANP,QAOIf,KAAK,CAACP,IAAN,CAAWmB,IAAX,CAAgB,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAC9B,YAAID,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAf,EAAqB,OAAO,CAAC,CAAR;AACrB,YAAID,CAAC,CAACC,IAAF,GAASF,CAAC,CAACE,IAAf,EAAqB,OAAO,CAAP;AACrB,eAAO,CAAP;AACD,OAJD,CARN;AAaA,aAAO,EACL,GAAGf,KADE;AAELP,QAAAA,IAAI,EAAEE;AAFD,OAAP;;AAIF,SAAK,iBAAL;AACE,YAAMC,UAAU,GACdK,MAAM,CAACE,OAAP,KAAmB,UAAnB,GACIH,KAAK,CAACP,IAAN,CAAWmB,IAAX,CAAgB,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAC9B,YAAI,OAAOb,MAAM,CAACE,OAAP,CAAea,MAAtB,KAAiC,QAArC,EAA+C;AAC7C;AACA,cAAIH,CAAC,CAACG,MAAF,GAAWF,CAAC,CAACE,MAAjB,EAAyB,OAAO,CAAP,CAFoB,CAEV;;AACnC,cAAIH,CAAC,CAACG,MAAF,GAAWF,CAAC,CAACE,MAAjB,EAAyB,OAAO,CAAC,CAAR;AACzB,iBAAO,CAAP,CAJ6C,CAInC;AACX,SALD,MAKO;AACL;AACA,cAAIC,QAAQ,CAACJ,CAAC,CAACG,MAAH,CAAR,GAAqBC,QAAQ,CAACH,CAAC,CAACE,MAAH,CAAjC,EAA6C,OAAO,CAAP;AAC7C,cAAIC,QAAQ,CAACJ,CAAC,CAACG,MAAH,CAAR,GAAqBC,QAAQ,CAACH,CAAC,CAACE,MAAH,CAAjC,EAA6C,OAAO,CAAC,CAAR;AAC7C,iBAAO,CAAP;AACD;AACF,OAZD,CADJ,CAaO;AAbP,QAcIhB,KAAK,CAACP,IAAN,CAAWmB,IAAX,CAAgB,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAC9B;AACA,YAAI,OAAOb,MAAM,CAACE,OAAP,CAAea,MAAtB,KAAiC,QAArC,EAA+C;AAC7C,cAAIH,CAAC,CAACG,MAAF,GAAWF,CAAC,CAACE,MAAjB,EAAyB,OAAO,CAAC,CAAR;AACzB,cAAIH,CAAC,CAACG,MAAF,GAAWF,CAAC,CAACE,MAAjB,EAAyB,OAAO,CAAP;AACzB,iBAAO,CAAP;AACD,SAJD,MAIO;AACL,cAAIC,QAAQ,CAACJ,CAAC,CAACG,MAAH,CAAR,GAAqBC,QAAQ,CAACH,CAAC,CAACE,MAAH,CAAjC,EAA6C,OAAO,CAAC,CAAR;AAC7C,cAAIC,QAAQ,CAACJ,CAAC,CAACG,MAAH,CAAR,GAAqBC,QAAQ,CAACH,CAAC,CAACE,MAAH,CAAjC,EAA6C,OAAO,CAAP;AAC7C,iBAAO,CAAP;AACD;AACF,OAXD,CAfN;AA2BA,aAAO,EACL,GAAGhB,KADE;AAELP,QAAAA,IAAI,EAAEG;AAFD,OAAP;;AAIF;AACE,aAAOI,KAAP;AArGJ;AAuGD;;AAED,eAAeD,WAAf","sourcesContent":["const initialState = {\r\n    dogs: [],\r\n    allDogs: [], //hago una copia del estado que siempre tenga todos los dogs para que me haga los filtros sobre todo y no sobre el estado que ya filtré\r\n    orderDogs: [], //de esta manera no tengo que volver a cargar a todos los perros\r\n    weightDogs: [],\r\n    temperaments: [], //declaro un nuevo estado temperament donde guardo los temperamentos\r\n    detail: [], //creo un nuevo estado detail para guardar la info del detalle del perro\r\n  };\r\n  \r\n  function rootReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n      case \"GET_DOGS\":\r\n        return {\r\n          ...state,\r\n          dogs: action.payload, //en mi estaod dogs que en un principio es un array vacio manda todo lo que te mande la accion getDogs\r\n          allDogs: action.payload, //y poné todos lo personajes en allDogs también (esto me sirve para los filtros)\r\n        };\r\n      case \"DOG_DETAIL\": //al hacer click sobre un perro accedo a sus detalles\r\n        return {\r\n          ...state,\r\n          detail: action.payload, // a detail que es el estado que está creado arriba, pasale action.payload\r\n        };\r\n      case \"GET_DOGS_BY_NAME\":\r\n        return {\r\n          ...state,\r\n          dogs: action.payload, //lo renderizo en el array dogs, este es el filtrado de buscar por nombre que hice en el back\r\n        };\r\n      case \"GET_TEMPERAMENTS\":\r\n        return {\r\n          ...state,\r\n          temperaments: action.payload,\r\n        };\r\n      case \"POST_DOG\": //post dog tiene que estar en el reducer pero no hace nada, porque yo creo un dog en una ruta nueva\r\n        return {\r\n          ...state,\r\n        };\r\n      case \"FILTER_DOGS_CREATED\": //si el valor de mi acción es created, traigo todos aquellos creados en la DB\r\n        const dogsFiltered =\r\n          action.payload === \"Created\"\r\n            ? state.allDogs.filter((dog) => dog.createdInDb) //primero siempre filtro el arreglo que tiene todo\r\n            : state.allDogs.filter((dog) => !dog.createdInDb);\r\n        return {\r\n          //retorno el estado, y si mi acción vale All traigo los de la api y los filtrados\r\n          ...state,\r\n          dogs: action.payload === \"All\" ? state.allDogs : dogsFiltered, //si tiene todo devolveme todo y si no devolvéme todos los dogs filtrados\r\n        };\r\n      case \"FILTER_BY_TEMP\":\r\n        const allDogs = state.allDogs;\r\n        const filteredDogs = allDogs.filter(\r\n          (el) => el.temperament?.includes(action.payload) // action.payload es el temperamento que seleccioné en el filtro de temperamentos que está en el state temperaments y lo que me devuelve es un array de strings con los temperamentos.\r\n        );\r\n        return {\r\n          ...state,\r\n          dogs: filteredDogs,\r\n        };\r\n      /*el valor del select es lo que va a ser el (e.target.value) y va a llegar a la acción por payload\r\n            includes xque cada perro puede tener varios temperamentos\r\n            y si no, devolveme todos los dogs filtrados\r\n            y en dogs le devuelvo la constante filteredDogs; cuando vuelvo a hacer otro filtro, agarra el que tiene todos (allDogs)\r\n            pero el que va a modificar va a hacer el estado de dogs*/\r\n      case \"ORDER_BY_NAME\":\r\n        const orderDogs =\r\n          action.payload === \"Asc\" //Si el valor es \"Asc\"\r\n            ? state.dogs.sort(function (a, b) {\r\n                //sort compara dos valores, accedemos al name y los compara, y los coloca a\r\n                if (a.name > b.name) return 1; //la derecha o a la izquierda, antes o despu{es en el arreglo dependiendo si son mas grandes o mas chicos\r\n                if (b.name > a.name) return -1;\r\n                return 0; //si son iguales los deja como está\r\n              }) // y si no, (si es no es Asc es Des) ordeno de Z a A\r\n            : state.dogs.sort(function (a, b) {\r\n                if (a.name > b.name) return -1;\r\n                if (b.name > a.name) return 1;\r\n                return 0;\r\n              });\r\n        return {\r\n          ...state,\r\n          dogs: orderDogs,\r\n        };\r\n      case \"ORDER_BY_WEIGHT\":\r\n        const weightDogs =\r\n          action.payload === \"Weight 1\"\r\n            ? state.dogs.sort(function (a, b) {\r\n                if (typeof action.payload.weight === \"string\") {\r\n                  //si recibo un string con el peso\r\n                  if (a.weight > b.weight) return 1; //accedo al valor weight que quiero comparar\r\n                  if (a.weight < b.weight) return -1;\r\n                  return 0; //si son iguales no hace nada, los deja igual\r\n                } else {\r\n                  // lo convierto en número\r\n                  if (parseInt(a.weight) > parseInt(b.weight)) return 1;\r\n                  if (parseInt(a.weight) < parseInt(b.weight)) return -1;\r\n                  return 0;\r\n                }\r\n              }) //si el valor no es 'weight 1'\r\n            : state.dogs.sort(function (a, b) {\r\n                //ordeno de mayor a menor\r\n                if (typeof action.payload.weight === \"string\") {\r\n                  if (a.weight > b.weight) return -1;\r\n                  if (a.weight < b.weight) return 1;\r\n                  return 0;\r\n                } else {\r\n                  if (parseInt(a.weight) > parseInt(b.weight)) return -1;\r\n                  if (parseInt(a.weight) > parseInt(b.weight)) return 1;\r\n                  return 0;\r\n                }\r\n              });\r\n        return {\r\n          ...state,\r\n          dogs: weightDogs,\r\n        };\r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n  \r\n  export default rootReducer;"]},"metadata":{},"sourceType":"module"}